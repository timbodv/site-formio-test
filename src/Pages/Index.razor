@page "/"
@implements IAsyncDisposable

@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>Index</PageTitle>

<h1>Form - test</h1>

@* this is the tag where FormIO will render. We want it to be unmanaged by Blazor *@
<div @ref="unmanagedElement"></div>

@code {
  private ElementReference unmanagedElement;
  private IJSObjectReference? formioModule;
  private IJSObjectReference? formioInstance;

  private HttpClient? _httpClient;

  private string _siteId = string.Empty;

  private string _driveId = string.Empty;

  private string _itemId = string.Empty;

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      string jsonContent = string.Empty;

      var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
      var queryStrings = QueryHelpers.ParseQuery(uri.Query);

      if (queryStrings.TryGetValue("siteId", out var siteId))
      {
        _siteId = siteId;
      }

      if (queryStrings.TryGetValue("driveId", out var driveId))
      {
        _driveId = driveId;
      }

      if (queryStrings.TryGetValue("itemId", out var itemId))
      {
        _itemId = itemId;
      }

      if (string.IsNullOrEmpty(_siteId) || string.IsNullOrEmpty(_siteId) || string.IsNullOrEmpty(_siteId))
      {
        Console.WriteLine("Query string does not include enough parameters");
      }
      else
      {
        try
        {
          _httpClient = HttpClientFactory.CreateClient("GraphAPI");
          jsonContent = await _httpClient.GetStringAsync($"https://graph.microsoft.com/v1.0/sites/{_siteId}/drives/{_driveId}/items/{_itemId}/content");
        }
        catch (AccessTokenNotAvailableException exception)
        {
          exception.Redirect();
        }

        if (!string.IsNullOrEmpty(jsonContent))
        {
          try
          {
            var jsonContentAsDocument = JsonDocument.Parse(jsonContent);
            formioModule = await JS.InvokeAsync<IJSObjectReference>("import", "./form.js");
            formioInstance = await formioModule.InvokeAsync<IJSObjectReference>("newForm", unmanagedElement, jsonContentAsDocument);
          }
          catch (JsonException)
          {
            Console.WriteLine("Failed to validate JSON");
            Console.WriteLine(jsonContent);
          }
        }
        else
        {
          Console.WriteLine("No JSON found to validate");
        }
      }
    }
  }

  async ValueTask IAsyncDisposable.DisposeAsync()
  {
    if (formioInstance is not null)
    {
      await formioInstance.DisposeAsync();
    }

    if (formioModule is not null)
    {
      await formioModule.DisposeAsync();
    }
  }
}
